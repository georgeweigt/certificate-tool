int base64_decode(uint8_t *buf, char *s, int length);
int base64_decode_digit(int c);
int check_signature(struct certinfo *p, struct certinfo *q);
int check_rsa_signature(struct certinfo *p, struct certinfo *q);
uint8_t * gen_pkcs_md5_signature(struct certinfo *p);
uint8_t * gen_pkcs_sha1_signature(struct certinfo *p);
uint8_t * gen_pkcs_sha224_signature(struct certinfo *p);
uint8_t * gen_pkcs_sha256_signature(struct certinfo *p);
uint8_t * gen_pkcs_sha384_signature(struct certinfo *p);
uint8_t * gen_pkcs_sha512_signature(struct certinfo *p);
int ecdsa256_verify(struct certinfo *p, struct certinfo *q);
int ecdhe256_verify_hash(uint8_t *hash, int hashlen, uint8_t *rr, int r_length, uint8_t *ss, int s_length, uint8_t *xx, uint8_t *yy);
int ecdsa256_verify_nib(uint32_t *h, uint32_t *r, uint32_t *s, uint32_t *x, uint32_t *y);
void ecdsa256_sign_nib(uint32_t *h, uint32_t *d, uint8_t *sig);
int ecdsa384_verify(struct certinfo *p, struct certinfo *q);
int ecdhe384_verify_hash(uint8_t *hash, int hashlen, uint8_t *rr, int r_length, uint8_t *ss, int s_length, uint8_t *xx, uint8_t *yy);
int ecdsa384_verify_nib(uint32_t *h, uint32_t *r, uint32_t *s, uint32_t *x, uint32_t *y);
void ecdsa384_sign_nib(uint32_t *h, uint32_t *d, uint8_t *sig);
void ec_init();
uint32_t * ec_modinv(uint32_t *c, uint32_t *p);
void ec_projectify(struct point *S);
int ec_affinify(struct point *S, uint32_t *p);
void ec_double(struct point *R, struct point *S, uint32_t *p);
void ec_add_xyz(struct point *R, struct point *S, struct point *T, uint32_t *p);
void ec_full_add(struct point *R, struct point *S, struct point *T, uint32_t *p);
void ec_full_sub(struct point *R, struct point *S, struct point *T, uint32_t *p);
void ec_mult(struct point *R, uint32_t *d, struct point *S, uint32_t *p);
int ec_get_msbit_index(uint32_t *u);
int ec_get_bit(uint32_t *u, int k);
int ec_F(int t);
void ec_twin_mult(struct point *R, uint32_t *d0, struct point *S, uint32_t *d1, struct point *T, uint32_t *p);
void ec_free_xyz(struct point *u);
uint32_t * ec_add(uint32_t *u, uint32_t *v);
uint32_t * ec_sub(uint32_t *u, uint32_t *v);
uint32_t * ec_mul(uint32_t *u, uint32_t *v);
uint32_t * ec_div(uint32_t *u, uint32_t *v);
void ec_mod(uint32_t *u, uint32_t *v);
uint32_t * ec_pow(uint32_t *u, uint32_t *v);
void ec_shr(uint32_t *u);
int ec_cmp(uint32_t *u, uint32_t *v);
int ec_equal(uint32_t *u, uint32_t v);
uint32_t * ec_int(int k);
uint32_t * ec_new(int n);
void ec_free(uint32_t *p);
uint32_t * ec_dup(uint32_t *u);
void ec_norm(uint32_t *u);
uint32_t * ec_hexstr_to_bignum(char *s);
uint32_t * ec_buf_to_bignum(uint8_t *buf, int len);
void ec_test();
void ec_test_full_add();
void ec_test_full_sub();
void ec_test_double();
void ec_test_mult();
void ec_test_twin_mult();
void ec_test256();
void ec_test384();
void ecdh_test();
int main(int argc, char *argv[]);
void check(char *filename);
void key(char *filename);
void print_rsa_keys(struct keyinfo *p);
void print_rsa_key(char *s, uint8_t *buf, int length);
void print_buf(uint8_t *buf, int length);
void malloc_kaput(void);
void hmac_md5(uint8_t *key, int keylen, uint8_t *buf, int len, uint8_t *out);
void md5(uint8_t *buf, int len, uint8_t *out);
void md5_with_key(uint8_t *key, uint8_t *buf, int len, uint8_t *out);
void md5_hash_block(uint8_t *buf, uint32_t *hash);
int parse_certificate(struct certinfo *p);
int parse_cert_level_1(struct certinfo *p, uint8_t *cert, int end);
int parse_cert_level_2(struct certinfo *p, uint8_t *cert, int offset, int end);
int parse_cert_level_3(struct certinfo *p, uint8_t *cert, int offset, int end);
int parse_public_key(struct certinfo *p, uint8_t *cert, int offset, int end);
int parse_rsa_info(struct certinfo *p, uint8_t *cert, int offset, int end);
int parse_signature_algorithm(struct certinfo *p, uint8_t *cert, int offset, int end);
int parse_signature(struct certinfo *p, uint8_t *cert, int offset, int end);
int parse_ecdsa_signature(struct certinfo *p, uint8_t *cert, int offset, int end);
int parse_validity(struct certinfo *p, uint8_t *cert, int offset, int end);
time_t convert_utc_time(uint8_t *s, int len);
time_t convert_generalized_time(uint8_t *s, int len);
int get_type_and_length(uint8_t *cert, int end, int *offset, int *type, int *length);
int parse_key_data(struct keyinfo *p);
int parse_rsa_key_data(struct keyinfo *p);
int parse_ec_key_data(struct keyinfo *p);
struct certinfo * read_certificate(char *filename);
struct keyinfo * read_key_file(char *filename);
struct keyinfo * read_rsa_key_file(char *filename);
struct keyinfo * read_ec_key_file(char *filename);
uint8_t * rsa_encrypt_signature(struct certinfo *p, struct certinfo *q);
void rsa_decrypt(uint8_t *buf, int len, struct keyinfo *ki);
uint32_t * step_up(uint32_t *m, uint32_t *p, uint32_t *q);
uint32_t * modpow(uint32_t *a, uint32_t *b, uint32_t *c);
void mshr(uint32_t *u);
uint32_t * madd(uint32_t *u, uint32_t *v);
uint32_t * msub(uint32_t *u, uint32_t *v);
uint32_t * mmul(uint32_t *u, uint32_t *v);
uint32_t * mdiv(uint32_t *u, uint32_t *v);
void mmod(uint32_t *u, uint32_t *v);
int mcmp(uint32_t *u, uint32_t *v);
uint32_t * mint(int k);
uint32_t * mnew(int n);
void mfree(uint32_t *p);
uint32_t * mcopy(uint32_t *u);
void mnorm(uint32_t *u);
uint32_t * buf_to_int(uint8_t *buf, int len);
uint32_t * str_to_int(char *s);
void print_rsa_keys(struct keyinfo *ki);
void hmac_sha1(uint8_t *key, int keylen, uint8_t *buf, int len, uint8_t *out);
void sha1(uint8_t *buf, int len, uint8_t *out);
void sha1_with_key(uint8_t *key, uint8_t *buf, int len, uint8_t *out);
void sha1_hash_block(uint8_t *buf, uint32_t *hash);
void hmac_sha224(uint8_t *key, int keylen, uint8_t *buf, int len, uint8_t *out);
void sha224(uint8_t *buf, int len, uint8_t *out);
void sha224_with_key(uint8_t *key, uint8_t *buf, int len, uint8_t *out);
void sha224_hash_block(uint8_t *buf, uint32_t *hash);
void hmac_sha256(uint8_t *key, int keylen, uint8_t *buf, int len, uint8_t *out);
void sha256(uint8_t *buf, int len, uint8_t *out);
void sha256_with_key(uint8_t *key, uint8_t *buf, int len, uint8_t *out);
void sha256_hash_block(uint8_t *buf, uint32_t *hash);
void hmac_sha384(uint8_t *key, int keylen, uint8_t *buf, int len, uint8_t *out);
void sha384(uint8_t *buf, int len, uint8_t *out);
void sha384_with_key(uint8_t *key, uint8_t *buf, int len, uint8_t *out);
void sha384_hash_block(uint8_t *buf, uint64_t *hash);
void hmac_sha512(uint8_t *key, int keylen, uint8_t *buf, int len, uint8_t *out);
void sha512(uint8_t *buf, int len, uint8_t *out);
void sha512_with_key(uint8_t *key, uint8_t *buf, int len, uint8_t *out);
void sha512_hash_block(uint8_t *buf, uint64_t *hash);
